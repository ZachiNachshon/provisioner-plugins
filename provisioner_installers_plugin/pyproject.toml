[tool.poetry]
name = "provisioner_installers_plugin"
version = "0.1.0"
description = "Python Installers Library"
authors = ["Zachi Nachshon <zachi.nachshon@gmail.com>"]
exclude = [
    "**/*_test*", 
    "**/*_fake*", 
    "dist", 
    "htmlcov", 
    "poetry.lock", 
    "pytest", 
    "Makefile", 
    "runners", 
    ".gitignore",
    ".coverage",
    ".coveragerc",
    ".git-deps",
    ".pytest_cache"]

# Include relative modules using the poetry-mutiproject-plugin
packages = [
    { include = "provisioner_installers_plugin", from = "../provisioner_installers_plugin" },
    { include = "provisioner_features_lib", from = "../../provisioner_features_lib" }
]

[tool.poetry.scripts]
# This module is not meant to be used as a standalone CLI, rather used as a plugin/library for a module with a main entry point i.e. provisioner
test_runner = "provisioner_installers_plugin.main_fake:fake_app"
# poetry run installers_plugin
installers_plugin = "provisioner_installers_plugin.main_dev:main"

[tool.black]
line-length = 120

[tool.ruff]
exclude = [".venv", "external", ".git-deps"]
line-length = 120
ignore = [ "E501", "E402", "F403", "F405" ]
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    # isort
    "I",
    # Whitespaces
    "W", 
]

[tool.mypy]
exclude = ["external"]
ignore_missing_imports = "True"
check_untyped_defs = "True"
disallow_untyped_defs = "True"
disallow_incomplete_defs = "True"
disallow_untyped_decorators = "True"
disallow_any_unimported = "False" # Generates an error if a component of a type becomes Any because mypy couldnâ€™t resolve an import
warn_return_any = "False" # Generates an error if you return a value with an Any type in a function that is annotated to return a non-Any value
warn_unused_ignores = "True"
no_implicit_optional = "True"
show_error_codes = "True"

[tool.poetry.dependencies]
python = "^3.10"
typer = "^0.6.1"
loguru = "^0.6.0"
requests = "^2.28.1"
rich = "^12.5.1"           # - Progress Bar for Python and CLI (https://github.com/Textualize/rich)
python3-nmap = "^1.5.4"
python-libnmap = "^0.7.3"
PyYAML = "^6.0"
inquirer = "^2.10.0"
python-hosts = "^1.0.3"
# provisioner-runtime = "^0.1.2"

# To perform a clean build:
#  - Remove poetry.lock file
#  - Remove the .venv folder
#  - Run "make deps" from within the plugins folder

####################################################
# USED ONLY FOR PLUGIN DEVELOPMENT
# 
# When 'pip install' packages for production, this line must be kept commented out
# otherwise, the 'provisioner' package won't be found (E ModuleNotFoundError: No module named 'provisioner')
# Either:
#   * Pip install 'provisioner' globally or under user
#   * Uncomment the line below  
# 
# provisioner_runtime = { path = "../../provisioner", develop = true }
# 
# Note: 
# On GitHub CI, this line is enabled before running the tests suite.
# We are not installing via pip since it is not shared between every GitHub action steps
####################################################

[tool.poetry.dev-dependencies]
black = "^22.8.0"
pytest = "^7.1.3"
mypy = "^1.0.0"
coverage = "^6.4.4"
diagrams = "^0.22.0"
ruff = "^0.0.265"
poetry-multiproject-plugin = "^1.5.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"