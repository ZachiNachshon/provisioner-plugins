[tool.poetry]
name = "provisioner_installers_plugin"
version = "0.1.0"
description = "Python Installers Library"
authors = ["Zachi Nachshon <zachi.nachshon@gmail.com>"]
exclude = [
    "**/*_test*", 
    "**/*_fake*", 
    "dist", 
    "htmlcov", 
    "poetry.lock", 
    "pytest", 
    "Makefile", 
    "runners", 
    ".gitignore",
    ".coverage",
    ".coveragerc",
    ".git-deps",
    ".pytest_cache"]

[tool.black]
line-length = 120

[tool.ruff]
exclude = [".venv", "external", ".git-deps"]
line-length = 120
ignore = [ "E501", "E402", "F403", "F405" ]
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    # isort
    "I",
    # Whitespaces
    "W", 
]

[tool.mypy]
exclude = ["external"]
ignore_missing_imports = "True"
check_untyped_defs = "True"
disallow_untyped_defs = "True"
disallow_incomplete_defs = "True"
disallow_untyped_decorators = "True"
disallow_any_unimported = "False" # Generates an error if a component of a type becomes Any because mypy couldnâ€™t resolve an import
warn_return_any = "False" # Generates an error if you return a value with an Any type in a function that is annotated to return a non-Any value
warn_unused_ignores = "True"
no_implicit_optional = "True"
show_error_codes = "True"

[tool.poetry.dependencies]
python = "^3.10"
typer = "^0.6.1"
loguru = "^0.6.0"
requests = "^2.28.1"
rich = "^12.5.1"           # - Progress Bar for Python and CLI (https://github.com/Textualize/rich)
python3-nmap = "^1.5.4"
python-libnmap = "^0.7.3"
PyYAML = "^6.0"
inquirer = "^2.10.0"
python-hosts = "^1.0.3"
python_core_lib = { git = "git@github.com:ZachiNachshon/provisioner.git", subdirectory = "python_core_lib" }
provisioner_features_lib = { git = "git@github.com:ZachiNachshon/provisioner.git", subdirectory = "provisioner_features_lib" }

[tool.poetry.dev-dependencies]
black = "^22.8.0"
pytest = "^7.1.3"
mypy = "^0.971"
coverage = "^6.4.4"
diagrams = "^0.22.0"
ruff = "^0.0.265"
python_core_lib = { git = "git@github.com:ZachiNachshon/provisioner.git", subdirectory = "python_core_lib" }
provisioner_features_lib = { git = "git@github.com:ZachiNachshon/provisioner.git", subdirectory = "provisioner_features_lib" }
# python_core_lib = { path = "../../provisioner/python_core_lib", develop = true }
# provisioner_features_lib = { path = "../../provisioner/provisioner_features_lib", develop = true }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"