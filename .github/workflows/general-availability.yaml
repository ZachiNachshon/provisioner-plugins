name: Plugin General Availability - Promote RC to PyPI

on:
  workflow_dispatch:
    inputs:
      plugin_name:
        type: choice
        description: 'Select plugin to promote to GA'
        options: 
          - 'provisioner_examples_plugin'
          - 'provisioner_installers_plugin'
          - 'provisioner_single_board_plugin'
        required: true
      rc_version:
        type: string
        description: 'Release Candidate version to promote (e.g., 1.2.3-RC.1). Leave empty to auto-select latest RC.'
        required: false

env:
  PYPI_API_TOKEN_PROVISIONER_EXAMPLES_PLUGIN: ${{ secrets.PYPI_API_TOKEN_PROVISIONER_EXAMPLES_PLUGIN }}
  PYPI_API_TOKEN_PROVISIONER_INSTALLERS_PLUGIN: ${{ secrets.PYPI_API_TOKEN_PROVISIONER_INSTALLERS_PLUGIN }}
  PYPI_API_TOKEN_PROVISIONER_SINGLE_BOARD_PLUGIN: ${{ secrets.PYPI_API_TOKEN_PROVISIONER_SINGLE_BOARD_PLUGIN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  POETRY_VERSION: "2.1.3"
  
jobs:
  promote_plugin_rc_to_ga:
    name: Promote Plugin RC to General Availability
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ '3.11' ]

    steps:
      - name: Checkout main provisioner repository
        uses: actions/checkout@v4
        with:
          repository: 'ZachiNachshon/provisioner'
          token: ${{ secrets.PROVISIONER_REPO_ACCESS_TOKEN }}
          submodules: false  # We'll handle submodules manually
          fetch-depth: 2  # Need previous commit to detect changes on push

      - name: Checkout plugins repository to get latest changes
        uses: actions/checkout@v4
        with:
          repository: 'ZachiNachshon/provisioner-plugins'
          token: ${{ secrets.PROVISIONER_REPO_ACCESS_TOKEN }}
          path: plugins
          fetch-depth: 2  # Need previous commit to detect changes

      - name: Setup Environment
        uses: ./.github/actions/setup
        env:
          PYTHON_VERSION: ${{ matrix.python }}
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Promote Plugin RC to GA
        id: promote_ga
        uses: ./.github/actions/promote-ga
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          rc_version: ${{ github.event.inputs.rc_version }}
          projects: |
            [
              {
                "project_path": "plugins/${{ github.event.inputs.plugin_name }}",
                "is_plugin": true,
                "github_repo": "ZachiNachshon/provisioner-plugins"
              }
            ]

      - name: Publish Plugin to PyPI
        uses: ./.github/actions/publish-pypi
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source_tag: ${{ github.event.inputs.plugin_name }}-v${{ steps.promote_ga.outputs.stable_version }}
          packages: |
            [
              {
                "project_path": "plugins/${{ github.event.inputs.plugin_name }}",
                "pypi_token": "${{
                  github.event.inputs.plugin_name == 'provisioner_examples_plugin' && env.PYPI_API_TOKEN_PROVISIONER_EXAMPLES_PLUGIN ||
                  github.event.inputs.plugin_name == 'provisioner_installers_plugin' && env.PYPI_API_TOKEN_PROVISIONER_INSTALLERS_PLUGIN ||
                  github.event.inputs.plugin_name == 'provisioner_single_board_plugin' && env.PYPI_API_TOKEN_PROVISIONER_SINGLE_BOARD_PLUGIN
                }}",
                "is_plugin": true
              }
            ] 