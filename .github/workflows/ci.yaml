name: CI

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

env:
  # Semantic version range syntax (3.x) or exact version of a Python version
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.4.1"

jobs:
  build:
    name: Tests Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo code
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # cache: 'poetry'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Set Poetry Config
        run: |
          poetry config virtualenvs.create true
          poetry config cache-dir

      - name: Set Poetry Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      # - name: Load cached venv
      #   id: cached-poetry-dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.cache/pypoetry/virtualenvs
      #     key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}
      #     # key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/**/poetry.lock') }}
      #     # path: .venv
      #     # key: ${{ runner.os }}-poetry-${{ hashFiles('**/**/poetry.lock') }}

      # - name: Load cached Poetry installation
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.local  # the path depends on the OS
      #     key: poetry-0  # increment to reset cache

      - name: Install all dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          make ci-install-deps-all
          pip install coverage

      - name: Run tests
        run: make ci-test-all
      
      # Requires CODECOV_TOKEN in GitHub repository secrets
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # Only required for private repositories
          # file: ./coverage.xml
          file: ./coverage-combined.xml
          fail_ci_if_error: true