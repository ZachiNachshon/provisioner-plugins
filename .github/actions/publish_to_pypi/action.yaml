name: 'Publish Provisioner Plugin to PyPi (auto version increment)'
description: 'Auto increment takes place before publishing'

inputs:
  PYPI_API_TOKEN_PROVISIONER_EXAMPLES_PLUGIN:
    type: string
    description: 'PyPi example plugin API token'
    required: false
  PYPI_API_TOKEN_PROVISIONER_INSTALLERS_PLUGIN:
    type: string
    description: 'PyPi installers plugin API token'
    required: false
  PYPI_API_TOKEN_PROVISIONER_SINGLE_BOARD_PLUGIN:
    type: string
    description: 'PyPi single-board plugin API token'
    required: false
  project_to_publish:
    type: choice
    description: 'Select plugin to publish to PyPi'
    options: 
      - 'provisioner_examples_plugin'
      - 'provisioner_installers_plugin'
      - 'provisioner_single_board_plugin'
    required: true

runs:
  using: 'composite'  
  steps:
    - name: Print Action Arguments
      run: |
        echo "::group::Print publish action arguments"
        echo "project_to_publish: ${{ inputs.project_to_publish }}"
        echo "::endgroup::"
      shell: bash

    - name: Install Required pip packages
      run: |
        pip install coverage twine
      shell: bash    

    # Discard any potential changes to the git index which might
    # contain dependencies section in the pyproject.toml file
    # and other non version-bump from previous steps/actions
    - name: Discard previous changes to git index
      run: |
        git reset --hard
        cd plugins 
        git reset --hard
        cd ..
      shell: bash    

    - name: Map PyPI API token to project
      id: map_token
      run: |
        case "${{ inputs.project_to_publish }}" in
          provisioner_examples_plugin)
            echo "PYPI_API_TOKEN=${{ inputs.PYPI_API_TOKEN_PROVISIONER_EXAMPLES_PLUGIN }}" >> $GITHUB_ENV
            # Used by GitHub CLI client
            echo "GH_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
            ;;
          provisioner_installers_plugin)
            echo "PYPI_API_TOKEN=${{ inputs.PYPI_API_TOKEN_PROVISIONER_INSTALLERS_PLUGIN }}" >> $GITHUB_ENV
            # Used by GitHub CLI client
            echo "GH_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
            ;;
          provisioner_single_board_plugin)
            echo "PYPI_API_TOKEN=${{ inputs.PYPI_API_TOKEN_PROVISIONER_SINGLE_BOARD_PLUGIN }}" >> $GITHUB_ENV
            # Used by GitHub CLI client
            echo "GH_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
            ;;
          *)
            echo "Unknown project_to_publish: ${{ inputs.project_to_publish }}"
            exit 1
            ;;
        esac
      shell: bash

    - name: Publish to PyPi
      env:
        PYPI_API_TOKEN: ${{ env.PYPI_API_TOKEN }}
      run: |
        echo "::group::Publishing to PyPi"
        publishable=${{ inputs.project_to_publish }}

        echo "Publishing ${publishable} plugin"

        # 
        # Publish plugin package
        # 
        cd plugins/${publishable}/${publishable}
        poetry version patch
        ver=$(poetry version | awk '{print $2}' | tr -d '\n')
        echo -n $ver > resources/version.txt

        ../../../scripts/publish_to_pypi.sh publish --build-type wheel --release-type pypi -y
        cd ../../..

        echo "::endgroup::" 
      shell: bash

    - name: Prepare git for commit
      run: |
        git config --global user.email "zachi.nachshon@gmail.com"
        git config --global user.name "ZachiNachshon"
      shell: bash

    - name: Open a GitHub PR with released version
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      run: |
        echo "::group::Opening a GitHub PR with released version"
        publishable=${{ inputs.project_to_publish }}

        # 
        # Open a GitHub PR on the plugins repository with plugin version bump
        # 
        cd plugins/${publishable}/${publishable}

        echo "Opening a GitHub PR on plugin version bump"
        echo "Working directory: $(pwd)"

        echo "Printing affected files:"
        git status

        ver=$(poetry version | awk '{print $2}' | tr -d '\n')
        git add resources/version.txt
        git add pyproject.toml

        branch_name=released-${publishable}-ver-${ver}
        git commit -m "Bump ${publishable} released version to ${ver}"
        git checkout -b ${branch_name}

        git push --set-upstream origin ${branch_name}
        gh pr create --title "[skip ci] Released ${publishable} version ${ver}" \
            --body "Bump ${publishable} released version to ${ver}" \
            --base master --head ${branch_name} \
            --label "auto pr"

        cd ../../..
            
        echo "::endgroup::"
      shell: bash
