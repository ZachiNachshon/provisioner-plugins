[tool.poetry]
name = "provisioner"
version = "0.1.0"
description = "Provision Everything Anywhere"
authors = ["Zachi Nachshon <zachi.nachshon@gmail.com>"]

# Until multi-project is supported natively with Poetry, use a plugins that bundles
# declared dependencies within the parent project. In this case we'll have to exclude
# Poetry package related files from being part of the tar.gz
# https://github.com/DavidVujic/poetry-multiproject-plugin
exclude = [
    "**/.venv",
    "**/*_test*", 
    "**/*_fake*", 
    "**/dist*", 
    "**/htmlcov", 
    "**/poetry.lock", 
    "**/pytest", 
    "**/Makefile", 
    "**/runners", 
    "**/.gitignore",
    "**/.coverage",
    "**/.coveragerc",
    "**/.git-deps",
    "**/.pytest_cache"]

packages = [
    { include = "provisioner" },
    { include = "resources" },
    { include = "external/ansible_playbooks" },
    # Must be boundled since those packages aren't pip installed, rather bundled with the source code
    { include = "python_core_lib", from="../python_core_lib" },
    { include = "provisioner_features_lib", from="../provisioner_features_lib" },
]

# A list of patterns that will be included in the final package.
# If no format is specified, it will default to include both sdist and wheel
# i.e. { path = "tests", format = ["sdist", "wheel"] }
include = [
    # This file must be packaged since it allow the Paths utility to find the 
    # module root folder used for reading bundled files
    # { path = "pyproject.toml" },
    { path = "provisioner/__init__.py" },
    { path = "provisioner/main.py" },
    # { path = "resources/version.txt" },
    { path = "resources/version.txt" },
    { path = "provisioner/config/config.yaml" },
    # Must be boundled since those packages aren't pip installed, rather bundled with the source code
    { path = "python_core_lib" },
    { path = "provisioner_features_lib" },
    # Must be boundled for referensing Ansible playbooks
    { path = "external/ansible_playbooks" },
]

[tool.poetry.scripts]
provisioner = "provisioner.main:main"
# rpi_diagrams = "rpi.os.diagrams.install_diag:main"

[tool.black]
line-length = 120

[tool.ruff]
exclude = [".venv", "external", ".git-deps"]
line-length = 120
ignore = [ "E501", "E402", "F403", "F405" ]
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    # isort
    "I",
    # Whitespaces
    "W", 
]

[tool.mypy]
exclude = ["external"]
ignore_missing_imports = "True"
check_untyped_defs = "True"
disallow_untyped_defs = "True"
disallow_incomplete_defs = "True"
disallow_untyped_decorators = "True"
disallow_any_unimported = "False" # Generates an error if a component of a type becomes Any because mypy couldnâ€™t resolve an import
warn_return_any = "False" # Generates an error if you return a value with an Any type in a function that is annotated to return a non-Any value
warn_unused_ignores = "True"
no_implicit_optional = "True"
show_error_codes = "True"

[tool.poetry.dependencies]
python = "^3.10"
typer = "^0.6.1"
loguru = "^0.6.0"
requests = "^2.28.1"
# Progress Bar for Python and CLI (https://github.com/Textualize/rich)
rich = "^12.5.1"
python3-nmap = "^1.5.4"
python-libnmap = "^0.7.3"
PyYAML = "^6.0"
inquirer = "^2.10.0"
python-hosts = "^1.0.3"
ansible = "^7.3.0"
ansible-runner = "^2.3.2"
# poetry-multiproject-plugin = "^1.1.4"
# GitPython = "^3.1.18" # - GitPython provides object model access to your git repository (https://github.com/gitpython-developers/GitPython)
# #Jinja2 = "^3.0.3"      - Templating engine (https://github.com/pallets/jinja)
# #sh = "^1.14.2"         - Subprocess replacement for Python (https://github.com/amoffat/sh)
# #backoff = "^1.10.0"    - Function decoration for backoff and retry (https://github.com/litl/backoff)
# #tenacity = "^8.0.1"    - General-purpose retrying library (https://github.com/jd/tenacity)


# A list of all of the optional dependencies, some of which are included in the
# below `extras`. They can be opted into by apps.
provisioner_installers_plugin = { path = "../provisioner_installers_plugin", develop = true, optional = true }
provisioner_examples_plugin = { path = "../provisioner_examples_plugin", develop = true, optional = true }
provisioner_single_board_plugin = { path = "../provisioner_single_board_plugin", develop = true, optional = true }

[tool.poetry.dev-dependencies]
black = "^22.8.0"
pytest = "^7.1.3"
mypy = "^0.991"
coverage = "^6.4.4"
diagrams = "^0.22.0"
ruff = "^0.0.265"
poetry-multiproject-plugin = "^1.1.4"
provisioner_installers_plugin = { path = "../provisioner_installers_plugin", develop = true, optional = true }
provisioner_examples_plugin = { path = "../provisioner_examples_plugin", develop = true, optional = true }
provisioner_single_board_plugin = { path = "../provisioner_single_board_plugin", develop = true, optional = true }

[tool.poetry.extras]
provisioner_installers_plugin = ["provisioner_installers_plugin"] # poetry install --extras "provisioner_installers_plugin" / poetry install -E provisioner_installers_plugin
provisioner_examples_plugin = ["provisioner_examples_plugin"] # poetry install --extras "provisioner_examples_plugin" / poetry install -E provisioner_examples_plugin
provisioner_single_board_plugin = ["provisioner_single_board_plugin"] # poetry install --extras "provisioner_single_board_plugin" / poetry install -E provisioner_single_board_plugin

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
