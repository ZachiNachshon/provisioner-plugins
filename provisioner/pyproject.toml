[tool.poetry]
name = "provisioner"
version = "0.1.0"
description = "Provision anything on any remote machine"
authors = ["Zachi Nachshon <zachi.nachshon@gmail.com>"]

# Until multi-project is supported natively with Poetry, use a plugins that bundles
# declared dependencies within the parent project. In this case we'll have to exclude
# Poetry package related files from being part of the tar.gz
# https://github.com/DavidVujic/poetry-multiproject-plugin
exclude = [
    "**/.venv",
    "**/*_test*", 
    "**/*_fake*", 
    "**/dist*", 
    "**/htmlcov", 
    "**/poetry.lock", 
    "**/pytest", 
    "**/Makefile", 
    "**/runners", 
    "**/.gitignore",
    "**/.coverage",
    "**/.coveragerc",
    "**/.git-deps",
    "**/.pytest_cache"]

packages = [
    { include = "provisioner" },
    # { include = "external", from="../python_core_lib" },
    { include = "python_core_lib", from="../python_core_lib" },
    { include = "python_features_lib", from="../python_features_lib" },
]

# # A list of patterns that will be included in the final package.
# # If no format is specified, it will default to include both sdist and wheel
# # i.e. { path = "tests", format = ["sdist", "wheel"] }
include = [
    { path = "provisioner/__init__.py" },
    { path = "provisioner/main.py" },
    { path = "resources/version.txt" },
    { path = "provisioner/config.yaml" },
    { path = "external" },
    { path = "python_features_lib" },
    { path = "python_installers_lib" },
]

[tool.poetry.scripts]
# tools = "external.python_scripts_lib.provisioner.main:app"
# tools = "tools.main:app"
provisioner = "provisioner.main:app"
# example = "provisioner.examples.main:app"
# rpi = "provisioner.rpi.main:app"
# k3s = "provisioner.k3s.main:app"
# rpi_diagrams = "rpi.os.diagrams.install_diag:main"

[tool.isort]
profile = "black"

[tool.black]
line-length = 120

[tool.mypy]
exclude = ["external"]
ignore_missing_imports = "True"
check_untyped_defs = "True"
disallow_untyped_defs = "True"
disallow_incomplete_defs = "True"
disallow_untyped_decorators = "True"
disallow_any_unimported = "False" # Generates an error if a component of a type becomes Any because mypy couldnâ€™t resolve an import
warn_return_any = "False" # Generates an error if you return a value with an Any type in a function that is annotated to return a non-Any value
warn_unused_ignores = "True"
no_implicit_optional = "True"
show_error_codes = "True"

[tool.poetry.dependencies]
python = "^3.10"
typer = "^0.6.1"
loguru = "^0.6.0"
requests = "^2.28.1"
rich = "^12.5.1"      # - Progress Bar for Python and CLI (https://github.com/Textualize/rich)
python3-nmap = "^1.5.4"
python-libnmap = "^0.7.3"
PyYAML = "^6.0"
inquirer = "^2.10.0"
python-hosts = "^1.0.3"
# GitPython = "^3.1.18" # - GitPython provides object model access to your git repository (https://github.com/gitpython-developers/GitPython)
# #Jinja2 = "^3.0.3"      - Templating engine (https://github.com/pallets/jinja)
# #sh = "^1.14.2"         - Subprocess replacement for Python (https://github.com/amoffat/sh)
# #backoff = "^1.10.0"    - Function decoration for backoff and retry (https://github.com/litl/backoff)
# #tenacity = "^8.0.1"    - General-purpose retrying library (https://github.com/jd/tenacity)
python_core_lib = { path = "../python_core_lib", develop = true }
python_features_lib = { path = "../python_features_lib", develop = true }


# A list of all of the optional dependencies, some of which are included in the
# below `extras`. They can be opted into by apps.
python_test_lib = { path = "../python_test_lib", develop = true, optional = true }
python_installers_lib = { path = "../python_installers_lib", develop = true, optional = true }
poetry-multiproject-plugin = "^1.1.4"

[tool.poetry.extras]
python_test_lib = ["python_test_lib"] # poetry install --extras "test_lib" / poetry install -E test_lib
python_installers_lib = ["python_installers_lib"] # poetry install --extras "test_lib" / poetry install -E test_lib

[tool.poetry.dev-dependencies]
black = "^22.8.0"
pytest = "^7.1.3"
mypy = "^0.991"
coverage = "^6.4.4"
diagrams = "^0.22.0"
isort = "^5.10.1"
poetry-multiproject-plugin = "^1.1.4"
python_core_lib = { path = "../python_core_lib", develop = true }
python_features_lib = { path = "../python_features_lib", develop = true }
python_test_lib = { path = "../python_test_lib", develop = true, optional = true }
python_installers_lib = { path = "../python_installers_lib", develop = true, optional = true }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"